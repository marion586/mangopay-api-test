#!/usr/bin/env node

require("dotenv-safe").config();
const http = require("http");
const db = require("../db/index"); // Import your database connection module
const appFactory = require("../app"); // Import the app factory
const { exampleCronJob, dailyCronJob, weeklyCronJob } = require("../crons/cronJobs"); // Import cron jobs

// Initialize the database and start the server
db.then((database) => {
  // Pass the database to the app factory
  const app =  appFactory(database).then(res => {
    exampleCronJob.start();
    dailyCronJob.start();
    weeklyCronJob.start();
  // Get the port from the environment or default to 3000
  const port = normalizePort(process.env.PORT || "3000");
  res.set("port", port);

  // Create an HTTP server
  const server = http.createServer(res);

  // Start listening on the specified port
  server.listen(port);

  // Add error and listening event handlers
  server.on("error", onError);
  server.on("listening", () => {
    const addr = server.address();
    const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
    console.log(`Server is listening on ${bind}`);
  });
  })
  
}).catch((err) => {
  console.error("Failed to connect to the database:", err);
  process.exit(1);
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // Named pipe
    return val;
  }

  if (port >= 0) {
    // Port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}
